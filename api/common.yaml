openapi: 3.0.2
info:
  title: Team One API
  contact:
    name: Team One
    email: nifigator@gmail.com
  version: '1.0.0'

servers:
  - url: /api/v1.0

paths:
  /customer/{customer_id}:
    get:
      summary: Get customer information
      operationId: routes.customers.get_customer
      tags:
        - Customers
      parameters:
      - name: customer_id
        description: Customer unique identifier
        in: path
        required: true
        example: 12
        schema:
          type: integer
      responses:
        '200':
          description: Customer data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /contractor/{contractor_id}:
    get:
      summary: Get contractor information
      operationId: routes.contractors.get_contractor
      tags:
        - Contractors
      parameters:
      - name: contractor_id
        description: Contractor unique identifier
        in: path
        required: true
        example: 10
        schema:
          type: integer
      responses:
        '200':
          description: Contractor data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contractor"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /customer/{customer_id}/issues:
    post:
      summary: Create issue
      operationId: routes.customers.create_issue
      tags:
        - Customers
      parameters:
      - name: customer_id
        description: Customer unique identifier
        in: path
        required: true
        example: 15
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerIssue"
      responses:
        '201':
          description: Issue created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerIssue"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    get:
      summary: Get customer issues
      operationId: routes.customers.get_issues
      tags:
        - Customers
      parameters:
       - name: customer_id
         description: Customer unique identifier
         in: path
         required: true
         example: 15
         schema:
          type: integer
      responses:
        '200':
           description: Customer issues list
           content:
             application/json:
               schema:
                 $ref: "#/components/schemas/CustomerIssues"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /customer/{customer_id}/issues/{issue_id}:
    get:
      summary: Get customer issue
      operationId: routes.customers.get_issue
      tags:
        - Customers
      parameters:
        - name: customer_id
          description: Customer unique identifier
          in: path
          required: true
          example: 15
          schema:
            type: integer
        - name: issue_id
          description: Issue unique identifier
          in: path
          required: true
          example: 55
          schema:
            type: integer
      responses:
        '200':
          description: Customer issue data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerIssue"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update customer issue
      operationId: routes.customers.update_issue
      tags:
        - Customers
      parameters:
        - name: customer_id
          description: Customer unique identifier
          in: path
          required: true
          example: 15
          schema:
            type: integer
        - name: issue_id
          description: Issue unique identifier
          in: path
          required: true
          example: 55
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerIssue"
      responses:
        '200':
          description: Updated customer issue data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerIssue"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Customer:
      properties:
        name:
          type: string
          description: Customer name
          example: Ivan
        middlename:
          type: string
          description: Customer name
          example: Ivanovich
        surname:
          type: string
          description: Customer name
          example: Ivanov
        street:
          type: string
          description: Custoner street
          example: Markovskogo
        house:
          type: string
          description: Customer hosuse number
          example: 12a
        flat:
          type: integer
          description: Customer flat number
          example: 99
        phone:
          type: string
          description: Customer phone number
          example: +79991234567
        email:
          type: string
          description: Customer email
          example: user@mail.com

    Contractor:
      properties:
        name:
          type: string
          description: Contractor name
          example: JSC Smart
        specializations:
          type: array
          items:
            type: string
            description: Specialization

    CustomerIssue:
      properties:
        status:
          type: string
          description: Issue Status
        category:
          type: string
          description: Issue category
        # customer_id:
        #   type: integer
        #   description: Customer ID
        body:
          type: string
          description: Issue text
        create_data:
          type: string
          format: date-time
          description: Issue create date and time
        rating:
          type: integer
          description: Issue rating

    CustomerIssues:
      type: array
      items:
        allOf:
        - type: object
          properties:
            id:
              type: integer
              description: Issue ID
              example: 1123
        - $ref: "#/components/schemas/CustomerIssue"

    Error:
      required:
        # - code
        - message
      properties:
        code: 
          type: integer
          format: int32
        message:
          type: string

